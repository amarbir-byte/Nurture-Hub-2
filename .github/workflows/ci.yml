name: 🚀 Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # 🔍 Code Quality & Security Analysis
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔍 Type Check
        run: npm run typecheck

      - name: 🧹 Lint Check
        run: npm run lint

      - name: 🔒 Security Audit
        run: npm run security:audit
        continue-on-error: true # Don't fail build, but report issues

      - name: 📊 Bundle Analysis
        run: npm run build:analyze
        continue-on-error: true

  # 🧪 Comprehensive Testing Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-gate

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🗄️ Setup Test Database
        run: |
          # Start local Supabase for testing
          npx supabase start
          npm run db:test ci
        env:
          SUPABASE_AUTH_EXTERNAL_GITHUB_ENABLED: false
          SUPABASE_AUTH_EXTERNAL_GOOGLE_ENABLED: false

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit -- --coverage --watchAll=false
              ;;
            "integration")
              npm run test:integration -- --coverage --watchAll=false
              ;;
            "e2e")
              npm run test:e2e
              ;;
          esac
        env:
          CI: true
          NODE_ENV: test

      - name: 📊 Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 🏗️ Build & Performance Testing
  build-and-performance:
    name: 🏗️ Build & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gate

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build Application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📏 Bundle Size Analysis
        run: |
          # Check bundle size limits
          MAX_BUNDLE_SIZE=1000000  # 1MB limit
          ACTUAL_SIZE=$(du -sb dist | cut -f1)

          echo "Bundle size: $ACTUAL_SIZE bytes"
          echo "Limit: $MAX_BUNDLE_SIZE bytes"

          if [ $ACTUAL_SIZE -gt $MAX_BUNDLE_SIZE ]; then
            echo "❌ Bundle size exceeds limit!"
            exit 1
          else
            echo "✅ Bundle size within limits"
          fi

      - name: ⚡ Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Store Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            lighthouse-results/
          retention-days: 7

  # 🔒 Security & Compliance Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gate

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 SAST Scan (CodeQL)
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 🛡️ Dependency Vulnerability Scan
        run: |
          npm audit --audit-level=high
          npx better-npm-audit audit

      - name: 🔐 Secrets Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # 🚀 Database Migration Testing
  database-migration:
    name: 🗄️ Database Migration Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gate

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🗄️ Test Database Migrations
        run: |
          # Test all migration scripts
          npm run db:test ci

          # Test rollback mechanisms
          npm run db:enterprise test

          # Validate schema integrity
          npm run db:validate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # 📱 Cross-Platform Testing
  cross-platform:
    name: 📱 Cross-Platform Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [quality-gate, test-suite]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build Test
        run: npm run build

      - name: 🧪 Basic Smoke Tests
        run: npm run test:smoke

  # 🚀 Deployment Preparation
  prepare-deployment:
    name: 🚀 Prepare Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-suite, build-and-performance, security-scan, database-migration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    outputs:
      deployment-ready: ${{ steps.validate.outputs.ready }}
      environment: ${{ steps.environment.outputs.env }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🎯 Determine Environment
        id: environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "env=development" >> $GITHUB_OUTPUT
          fi

      - name: ✅ Validate Deployment Readiness
        id: validate
        run: |
          echo "🔍 Validating deployment readiness..."

          # Check if all required secrets are available
          REQUIRED_SECRETS=("VERCEL_TOKEN" "SUPABASE_PROJECT_REF" "VITE_SUPABASE_URL" "VITE_SUPABASE_ANON_KEY")

          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [[ -z "${!secret}" ]]; then
              echo "❌ Missing required secret: $secret"
              echo "ready=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          done

          echo "✅ All deployment requirements met"
          echo "ready=true" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  # 🌐 Deploy to Vercel
  deploy:
    name: 🌐 Deploy to ${{ needs.prepare-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deployment-ready == 'true'
    environment: ${{ needs.prepare-deployment.outputs.environment }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🗄️ Run Database Migrations
        run: |
          # Apply migrations for target environment
          if [[ "${{ needs.prepare-deployment.outputs.environment }}" == "production" ]]; then
            npm run db:enterprise deploy production
          elif [[ "${{ needs.prepare-deployment.outputs.environment }}" == "staging" ]]; then
            npm run db:enterprise deploy staging
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PROD_PROJECT_REF: ${{ secrets.PROD_PROJECT_REF }}
          STAGING_PROJECT_REF: ${{ secrets.STAGING_PROJECT_REF }}

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🔗 Get Deployment URL
        id: deployment
        run: |
          # Get the deployment URL from Vercel
          DEPLOYMENT_URL=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} | grep ${{ github.sha }} | awk '{print $2}' | head -1)
          echo "url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

  # 🧪 Post-Deployment Testing
  post-deployment-tests:
    name: 🧪 Post-Deployment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy
    if: always() && needs.deploy.result == 'success'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🌐 Health Check
        run: |
          echo "🔍 Testing deployment health..."

          DEPLOYMENT_URL="${{ needs.deploy.outputs.deployment-url }}"

          # Wait for deployment to be ready
          for i in {1..30}; do
            if curl -f "$DEPLOYMENT_URL" > /dev/null 2>&1; then
              echo "✅ Deployment is healthy"
              break
            fi
            echo "⏳ Waiting for deployment... ($i/30)"
            sleep 10
          done

      - name: ⚡ Performance Smoke Test
        run: |
          # Basic performance check
          curl -w "@curl-format.txt" -o /dev/null -s "${{ needs.deploy.outputs.deployment-url }}"

      - name: 🔒 Security Headers Check
        run: |
          echo "🔒 Checking security headers..."

          RESPONSE=$(curl -I "${{ needs.deploy.outputs.deployment-url }}" 2>/dev/null)

          # Check for required security headers
          REQUIRED_HEADERS=("X-Content-Type-Options" "X-Frame-Options" "X-XSS-Protection")

          for header in "${REQUIRED_HEADERS[@]}"; do
            if echo "$RESPONSE" | grep -qi "$header"; then
              echo "✅ $header header present"
            else
              echo "⚠️ $header header missing"
            fi
          done

  # 📊 Deployment Notifications
  notify:
    name: 📊 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-tests]
    if: always()

    steps:
      - name: 📱 Notify Success
        if: needs.deploy.result == 'success' && needs.post-deployment-tests.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Environment: ${{ needs.prepare-deployment.outputs.environment }}"
          echo "URL: ${{ needs.deploy.outputs.deployment-url }}"

          # Here you would typically send notifications to Slack, Discord, etc.

      - name: 🚨 Notify Failure
        if: needs.deploy.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and take appropriate action."

          # Here you would send failure notifications and potentially trigger rollback